#!/bin/bash

PROG=$(pgrep openwrtAI |wc -l)
echo $PROG
if [ $PROG -gt '2' ] ; then
echo "more then one copy running"
chroot /root/OpenWrtAI/ /bin/bash ./kill.sh
pkill mpg123
pkill read
pkill speak
pkill readCon
pkill readChap
pkill flite
fi

pidof -s -o '%PPID' -x $( basename $0 ) > /dev/null 2>&1 && exit
chroot /root/OpenWrtAI/ /bin/bash ./kill.sh
pkill mpg123
pkill read
A=0
B=0
DOMOTICZ=http://192.168.168.150:8080
MUSIC=/MEDIA/Audio   #music folder 
V=awb  ## voice
O=0    ## online or offline voice 1=offline 

while [[ $A < 3 ]]; do

wget -q --spider http://google.com

#______________onlineor offline speech engine________________#

if [ $? -eq 0 ]; then
      echo "online"
      if  [ $B -eq 0 ];then
         # ./speak " what can I do for you" $O $V > /dev/null 2>&1
          B=1
          DOCKER=$(docker ps |grep kaldi | awk '{print $NF}')
          if [ $DOCKER == 'kaldi' ]
          then
            ./speak " your Network was  offline, shutting down kaldi - please wait " $O $V > /dev/null 2>&1

            docker stop kaldi
          fi           
         ./speak " what can I do for you" $O $V > /dev/null 2>&1

       fi
arecord -f S16_LE -d 3 -r 16000  /tmp/mic.wav  > /dev/null 2>&1


   #espeak "one moment" > /dev/null 2>&1
   ./speak "one moment"  $O $V  > /dev/null 2>&1

   ./gtrans.py > /tmp/stt # > /dev/null 2>&1

   Output=$(cat /tmp/stt | sed -s '1d' | grep transcript | head -n 1 | sed  "s/'transcript': //g" |sed  "s/},//g" |sed 's/^ *//' |sed 's/}],//' | sed 's/{.*, //' ) # 
   #   echo "Online"


else
    echo "offline"
      if [ $B -eq 0 ];then
         
         B=1
         O=1
         DOCKER=$(docker ps |grep kaldi | awk '{print $NF}') 
            if [[ -z $DOCKER ]]
          then
          echo "starting kaldi"
            docker start kaldi
           ./speak " Network currently offline starting kaldi server - please wait " 1 $V  > /dev/null 2>&1
           sleep 20

          fi   
          ./speak " what can I do for you" 1 $V  > /dev/null 2>&1
  


       fi
    
    arecord -f S16_LE -d 3 -r 16000  /tmp/mic.wav  > /dev/null 2>&1
    

    ./speak "one moment"  1 $V   > /dev/null 2>&1
    ### kadi ###
 rm /tmp/stt2
    ### kadi###
./kaldi.py /tmp/mic.wav >>/tmp/stt2  ### kaldi speech to text docker container 
    ### kadi###
Output=$(cat /tmp/stt2 | grep '"text" :' | sed 's/ "text" : //g' | sed 's/""//g' | sed 's/"the"//g' | sed  '/^\s*$/d' |tr '"' ' ')   ### kaldi speech to text docker container 
   
# chroot /root/OpenWrtAI /bin/bash WHISPER.sh
   
# Output=$(cat /tmp/mic.wav.txt  ) #whisper
  
    
#     echo "Offline"
fi

#__________________END _________________________#

echo $Output
############## single word commands  ##################
NO_WHITESPACE="$(echo -e "${Output}" | sed 's/$/-1/' | tr -d ' ' | sed "s/'//g" )"
if [ "$NO_WHITESPACE" == 'stop-1' ]
     then
         echo "stop"
         ./speak "okay, fair well" $O $V
          exit

 elif  [ "$NO_WHITESPACE" == 'continue-1' ] 
     then
       ./readCon $O $V
       exit

elif  [ "$NO_WHITESPACE" == 'information-1' ]
       then
       ./speak " what INFORMATION? " $O $V > /dev/null 2>&1
        arecord -f S16_LE -d 4 -r 16000  /tmp/mic.wav  > /dev/null 2>&1
       ./speak "one moment"  $O $V  > /dev/null 2>&1
       ./gtrans.py > /tmp/stt # > /dev/null 2>&1
        Output=$(cat /tmp/stt | sed -s '1d' | grep transcript | head -n 1 | sed  "s/'transcript': //g" |sed  "s/},//g" |sed 's/^ *//' |sed 's/}],//' | sed 's/{.*, //' ) #
   
   while [[ $A < 3 ]]; do  ##### chat bot loop

     echo $Output
     SEARCH=$(echo ${Output} | tr ' ' '+' )
     lynx -dump "https://duckduckgo.com/?q="$SEARCH > /tmp/info.page
     Output=$( cat /tmp/info.page | sed -n '/Zero-click/,/"Wikipedia"/p'  |sed '1d' |sed 's/More at//' |sed 's/\[.*\]//'|sed 's/"Wikipedia"//')

      if [[ -z $Output ]]
        then
            Output=$( cat /tmp/info.page | sed -n '/  1.  /,/  2.  /p' |sed '$d'| sed '$d' | sed '$d' |  sed '1d' |sed 's/\[.*\]//' )

      fi
      echo $Output > /tmp/info.result

      ./read /tmp/info.result $O $V
      sleep 1
      mpg123 bleep.mp3 > /dev/null 2>&1

######### chat bot #########
   
      
      arecord -f S16_LE -d 5 -r 16000  /tmp/mic.wav  > /dev/null 2>&1
      ./gtrans.py > /tmp/stt # > /dev/null 2>&1
    
      Output=$(cat /tmp/stt | sed -s '1d' | grep transcript | head -n 1 | sed  "s/'transcript': //g" |sed  "s/},//g" |sed 's/^ *//' |sed 's/}],//' | sed 's/{.*, //' )   
    if [[ -z $Output ]]
        then
   
    ./speak "Good-Bye" $O $V

    exit
    fi
   
done
##############information chat bot end #######

elif  [ "$NO_WHITESPACE" == 'chat-1' ]   ###chatGPT
       then
       ./speak " what would you like to chat about? " $O $V > /dev/null 2>&1
        arecord -f S16_LE -d 4 -r 16000  /tmp/mic.wav  > /dev/null 2>&1
#       ./speak "one moment"  $O $V  > /dev/null 2>&1
       ./gtrans.py > /tmp/stt # > /dev/null 2>&1
        Output=$(cat /tmp/stt | sed -s '1d' | grep transcript | head -n 1 | sed  "s/'transcript': //g" |sed  "s/},//g" |sed 's/^ *//' |sed 's/}],//' | sed 's/{.*, //' ) #| sed 's/^/"/' | sed 's/$/" /') #
 
   while [[ $A < 3 ]]; do  ##### chat bot loop

     echo $Output > /tmp/openai.dat
     echo $Output
     ./openai-2    > /dev/null 2>&1    # $Output
      ./txtcor > /tmp/openai.result  ### text corretion for faster smoother speech
    
      ./read /tmp/openai.result $O $V
      sleep 1
      mpg123 bleep.mp3 > /dev/null 2>&1

######### chat bot   speech detection #########


      arecord -f S16_LE -d 5 -r 16000  /tmp/mic.wav  > /dev/null 2>&1
      ./gtrans.py > /tmp/stt # > /dev/null 2>&1

      Output=$(cat /tmp/stt | sed -s '1d' | grep transcript | head -n 1 | sed  "s/'transcript': //g" |sed  "s/},//g" |sed 's/^ *//' |sed 's/}],//' | sed 's/{.*, //' ) #| sed 's/^/"/' | sed 's/$/" /')
    if [[ -z $Output ]]
        then

    ./speak "Good-Bye" $O $V

    exit
    fi

done
##############information chat bot end #######




###exit 

fi

#################### END #############################


############ LEVENSHTEIN ############ 
echo $Output > /tmp/WC.tmp
WORDCOUNT="$( cat /tmp/WC.tmp | wc -w  | tr -d ' ' )"
echo " # of  words "$WORDCOUNT
if [[ $WORDCOUNT -lt '2' ]]; then
Output="'NOT_ENOUGH_WORDS_DETECTED'"
fi

echo $Output
input=$(echo 'levenshtein -i -s d -a 3 -H 1  -f ITEM.list "'$Output'"' )
LEV=$(eval "$input")
echo "lev-1" $LEV
Output=$LEV
input=$(echo 'levenshtein -i -f ITEM.list "'$Output'"' )
LEV=$(eval "$input")
echo "lev-2" $LEV

################ END########


NO_WHITESPACE="$(echo -e "${Output}" | sed 's/$/-1/' | tr -d ' ' | sed "s/'//g" )"
echo $NO_WHITESPACE
echo $NO_WHITESPACE >> /tmp/whatiheard.tmp    ###  just tail -f /tmp/whatiheard.tmp  to determine  what it heariing and adjust your if/elis condition for speech  variations 

####################### PHRASE FUNCTION ###########

if [ $NO_WHITESPACE == 'playmusic-1' ]
      then
         echo "playing "
          chroot /root/OpenWrtAI /bin/bash VLC.sh 'playlist.m3u --random '  # mplayer has trouble in chroot  goes straight to pause for some weird reason
         sleep 2
         echo "playing Music folder"
         echo "'playlist.m3u --random '" >station.tmp
         playback=$(cat playback.tmp)
      if [ $playback == 'house' ] ; then
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh http://127.0.0.2:9090/stream '-af channels=4:4:0:2:0:0:1:3:1:1'    ### if you want 6 channel then: channels=6:6:0:2:0:4:0:0:1:3:1:5:1:1'
      elif [ $playback == 'livingroom' ] ; then
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh http://127.0.0.1:9090/stream '-af channels=4:2:0:2:1:3'
       else
         #chroot /root/OpenWrtAI /bin/bash MPLAYER.sh 'https://rogers-hls.leanstream.co/rogers/win1023.stream/playlist.m3u8'
       mpg123 http://127.0.0.1:9090/stream

       fi
       
        # cd $MUSIC
        # find  -iname '*.mp3' | mpg123 -Z -@ -
         A=3




################## playback #######################
elif [ $NO_WHITESPACE == 'playbackhouse-1' ]  || [ $NO_WHITESPACE == 'playinhouse-1' ] || [ $NO_WHITESPACE == 'playhouse-1' ]
      then

         echo "playback house"
          echo "house" > playback.tmp
         station="$(cat station.tmp)"

         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh $station '-af channels=4:4:0:2:0:0:1:3:1:1'
         A=3

elif [ $NO_WHITESPACE == 'playbackoffice-1' ] || [ $NO_WHITESPACE == 'playinoffice-1' ] || [ $NO_WHITESPACE == 'playoffice-1' ]
      then

         echo "playback office"
         echo "" > playback.tmp
         station="$(cat station.tmp)"
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh $station
         A=3

elif [ $NO_WHITESPACE == 'playbacklivingroom-1' ] || [ $NO_WHITESPACE == 'playinlivingroom-1' ] || [ $NO_WHITESPACE == 'playlivingroom-1' ]
      then

         echo "playback livingroom"
          echo "livingroom" > playback.tmp
         station="$(cat station.tmp)"
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh $station  '-af channels=4:2:0:2:1:3'
         A=3

################# weather ##########################

elif [ $NO_WHITESPACE == 'weatherforecast-1' ]
      then

         echo "weather forecast" 
          ./forecast
         ./read /tmp/forecast.tmp  $O $V 
         A=3

elif [ $NO_WHITESPACE == 'weatherupdate-1' ] 
      then

         echo "weather forecast"
          ./current
         ./read /tmp/current.tmp $O $V 
         A=3

elif [ "$NO_WHITESPACE" == 'weatheralert-1' ] || [ "$NO_WHITESPACE" == 'weatheralerts-1' ]
     then
         echo " weather alert"
        # Speech=$(cat /tmp/wstatement) # |sed 's/^/"/' | sed 's/$/"/' )
        # ./speak $Speech
         ./read /tmp/wstatement $O $V 
          A=3


################### radio staions ###################

elif [ $NO_WHITESPACE == 'playCityFM-1' ] ##################|| [ $NO_WHITESPACE == 'CityFM-1' ] || [ $NO_WHITESPACE == 'playcityfm-1' ] || [ $NO_WHITESPACE == 'playcityofem-1' ]
      then
        
         echo "playing  citi fm "
         echo "http://rogers-hls.leanstream.co/rogers/win921.stream/icy" >station.tmp
         playback=$(cat playback.tmp)
      if [ $playback == 'house' ] ; then
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh http://rogers-hls.leanstream.co/rogers/win921.stream/icy '-af channels=4:4:0:2:0:0:1:3:1:1' #channel mapping audio on 5.1 device  front is and rear playing
      elif [ $playback == 'livingroom' ] ; then
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh http://rogers-hls.leanstream.co/rogers/win921.stream/icy '-af channels=4:2:0:2:1:3'  ##channel mapping audio on 5.1 device  only is  rear playing
       else
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh http://rogers-hls.leanstream.co/rogers/win921.stream/icy  # front only plays 
      fi

         #sleep 2
         #mpg123 http://127.0.0.1:9090/stream

         A=3

elif [ $NO_WHITESPACE == 'playKissFM-1' ]  #######|| [ $NO_WHITESPACE == 'aKissFM-1' ] || [ $NO_WHITESPACE == 'KissFM-1' ] || [ $NO_WHITESPACE == 'playkiss-1' ] 
      then
          chroot /root/OpenWrtAI /bin/bash VLC.sh 'https://rogers-hls.leanstream.co/rogers/win1023.stream/playlist.m3u8'  # mplayer has trouble with stream  so vlc transcodes it first
         sleep 2
         echo "playing  kiss fm "
         echo "https://rogers-hls.leanstream.co/rogers/win1023.stream/playlist.m3u8" >station.tmp
         playback=$(cat playback.tmp)
      if [ $playback == 'house' ] ; then
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh http://127.0.0.2:9090/stream '-af channels=4:4:0:2:0:0:1:3:1:1'
      elif [ $playback == 'livingroom' ] ; then
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh http://127.0.0.1:9090/stream '-af channels=4:2:0:2:1:3'
       else
         #chroot /root/OpenWrtAI /bin/bash MPLAYER.sh 'https://rogers-hls.leanstream.co/rogers/win1023.stream/playlist.m3u8'  
       mpg123 http://127.0.0.1:9090/stream

       fi 
         #sleep 2
         #mpg123 http://127.0.0.1:9090/stream
         
         A=3

elif [ $NO_WHITESPACE == 'playPeggyFM-1' ]        # || [ $NO_WHITESPACE == 'heyPeggyFM-1' ] || [ $NO_WHITESPACE == 'peggy-1' ] || [ $NO_WHITESPACE == 'playpeggy-1 ]
      then

         echo "playing  peggy fm "
         
         echo "http://live.leanstream.co/CJGVFM?" >station.tmp
          playback="$(cat playback.tmp)"
       if [ $playback == 'house' ] ; then
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh http://live.leanstream.co/CJGVFM? '-af channels=4:4:0:2:0:0:1:3:1:1'
      elif [ $playback == 'livingroom' ] ; then
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh http://live.leanstream.co/CJGVFM? '-af channels=4:2:0:2:1:3'
       else
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh 'http://live.leanstream.co/CJGVFM?' 
       fi   
          #sleep 2
         #mpg123 http://127.0.0.1:9090/stream

         A=3

elif [ $NO_WHITESPACE == 'playPower97-1' ]  ############### || [ $NO_WHITESPACE == 'power97-1' ] || [ $NO_WHITESPACE == 'playpower97-1' ] || [ $NO_WHITESPACE == 'playpower-1' ]

      then

         chroot /root/OpenWrtAI /bin/bash VLC.sh 'https://live.leanstream.co/CJKRFM'
         sleep 2

         echo "playing  power 97  fm "
          playback="$(cat playback.tmp)"
       if [ $playback == 'house' ] ; then
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh http://127.0.0.1:9090/stream '-af channels=4:4:0:2:0:0:1:3:1:1'
      elif [ $playback == 'livingroom' ] ; then
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh http://127.0.0.1:9090/stream '-af channels=4:2:0:2:1:3'
       else
         mpg123 http://127.0.0.1:9090/stream
       fi
         A=3

elif [ $NO_WHITESPACE == 'playVirginRadio-1' ] ##############################|| [ $NO_WHITESPACE == 'playvirgin-1' ] || [ $NO_WHITESPACE == 'VirginRadio-1' ]
      then
          chroot /root/OpenWrtAI /bin/bash VLC.sh 'https://18183.live.streamtheworld.com/CKMMFM.mp3'  # mplayer has trouble with stream  so vlc transcodes it first 
         sleep 2

         echo "playing  Virgin Radio "
         echo "https://18183.live.streamtheworld.com/CKMMFM.mp3" >station.tmp
         playback="$(cat playback.tmp)"
       if [ $playback == 'house' ] ; then
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh http://127.0.0.1:9090/stream '-af channels=4:4:0:2:0:0:1:3:1:1'
      elif [ $playback == 'livingroom' ] ; then
         chroot /root/OpenWrtAI /bin/bash MPLAYER.sh http://127.0.0.1:9090/stream '-af channels=4:2:0:2:1:3'
       else
         #chroot /root/OpenWrtAI /bin/bash MPLAYER.sh 'https://18183.live.streamtheworld.com/CKMMFM.mp3'
         mpg123 http://127.0.0.1:9090/stream
       fi 

         A=3

elif [ "$NO_WHITESPACE" == 'stop-1' ] 
     then
         echo "stop"
         ./speak "okay, fair well" $O $V 
          A=3

#################### read book ##################

elif [ "$NO_WHITESPACE" == 'readbook-1' ] 
     then
       ./ReadBook $O $V 
       A=3
 elif [ "$NO_WHITESPACE" == 'continuewithbook-1' ] || [ "$NO_WHITESPACE" == 'continue-1' ] || [ "$NO_WHITESPACE" == 'continuereading-1' ]
     then
       ./readCon $O $V   
       A=3
############# domoticz ##################################
#  curl -s 'http://127.0.0.1:8080/json.htm?type=command&param=udevice&idx=1&nvalue=0&svalue=$MQTT;0'
# curl -s 'http://127.0.0.1:8080/json.htm?type=command&param=switchlight&idx=IDX&switchcmd=Set%20Level&level=LEVEL'

 elif [ "$NO_WHITESPACE" == 'officelighton-1' ] || [ "$NO_WHITESPACE" == 'turnonofficelight-1' ] 
     then
       curl -s $DOMOTICZ'/json.htm?type=command&param=switchlight&idx=19&switchcmd=Set%20Level&level=100'
       curl -s $DOMOTICZ'/json.htm?type=command&param=switchlight&idx=69&switchcmd=Set%20Level&level=100'
       A=3
      
 elif [ "$NO_WHITESPACE" == 'officelightoff-1' ] || [ "$NO_WHITESPACE" == 'turnoffofficelight-1' ] 
     then
       curl -s $DOMOTICZ'/json.htm?type=command&param=switchlight&idx=19&switchcmd=Set%20Level&level=0'
       curl -s $DOMOTICZ'/json.htm?type=command&param=switchlight&idx=69&switchcmd=Set%20Level&level=0'
      A=3
 elif [ "$NO_WHITESPACE" == 'kitchenlighton-1' ] || [ "$NO_WHITESPACE" == 'turnonkitchenlight-1' ] 
     then
       curl -s $DOMOTICZ'/json.htm?type=command&param=switchlight&idx=119&switchcmd=Set%20Level&level=100'
       curl -s $DOMOTICZ'/json.htm?type=command&param=switchlight&idx=159&switchcmd=Set%20Level&level=100'
       A=3
      
 elif [ "$NO_WHITESPACE" == 'kitchenlightoff-1' ] || [ "$NO_WHITESPACE" == 'turnoffkitchenlight-1' ] 
     then
       curl -s $DOMOTICZ'/json.htm?type=command&param=switchlight&idx=119&switchcmd=Set%20Level&level=0'
       curl -s $DOMOTICZ'/json.htm?type=command&param=switchlight&idx=159&switchcmd=Set%20Level&level=0'
      A=3   
   elif [ "$NO_WHITESPACE" == 'bathroomon-1' ] || [ "$NO_WHITESPACE" == 'turnonbathroom-1' ] 
     then
       curl -s $DOMOTICZ'/json.htm?type=command&param=switchlight&idx=53&switchcmd=Set%20Level&level=100'
       
       A=3
      
 elif [ "$NO_WHITESPACE" == 'bathroomoff-1' ] || [ "$NO_WHITESPACE" == 'turnoffbathroom-1' ] 
     then
       curl -s $DOMOTICZ'/json.htm?type=command&param=switchlight&idx=53&switchcmd=Set%20Level&level=0'
       
      A=3   
elif [ "$NO_WHITESPACE" == 'officeon-1' ] || [ "$NO_WHITESPACE" == 'turnonoffice-1' ] 
     then
       curl -s $DOMOTICZ'/json.htm?type=command&param=switchlight&idx=23&switchcmd=Set%20Level&level=100'
       
       A=3
      
 elif [ "$NO_WHITESPACE" == 'officeoff-1' ] || [ "$NO_WHITESPACE" == 'turnoffoffice-1' ] 
     then
       curl -s $DOMOTICZ'/json.htm?type=command&param=switchlight&idx=23&switchcmd=Set%20Level&level=0'
       
      A=3 
elif [ "$NO_WHITESPACE" == 'livingroomon-1' ] || [ "$NO_WHITESPACE" == 'turnonlivingroom-1' ] 
     then
       curl -s $DOMOTICZ'/json.htm?type=command&param=switchlight&idx=28&switchcmd=Set%20Level&level=100'
       
       A=3
      
 elif [ "$NO_WHITESPACE" == 'livingroomoff-1' ] || [ "$NO_WHITESPACE" == 'turnofflivingroom-1' ] 
     then
       curl -s $DOMOTICZ'/json.htm?type=command&param=switchlight&idx=48&switchcmd=Set%20Level&level=0'
       
      A=3    
#############  failed to understand ########################
 
 else

       echo "oops"
    if [ $A == 2 ]; then
        sleep 2 
        ./speak " Sorry I do not understand"  $O $V 
         ((A++))
     else
        ./speak "sorry, Please repeat " $O $V 
        ((A++))
     fi


fi
############## END of PHRASE ###################
done 
######
